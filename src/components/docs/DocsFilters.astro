---
const rtTypes = ["All", "New", "Classes", "Conditions", "Effects", "Events", "Expressions", "Functions", "Sections", "Structures"]
const versions = ["All", "2.10", "2.9", "2.8", "2.7"]
---

<script>
    enum _DocType {
        UNKNOWN = "All",
        NEW = "New",
        CLASS = "Class",
        CONDITION = "Condition",
        EFFECT = "Effect",
        EVENT = "Event",
        EXPRESSION = "Expression",
        FUNCTION = "Function",
        SECTION = "Section",
        STRUCTURE = "Structure"
    }

    const types: any = {
        "All": _DocType.UNKNOWN,
        "New": _DocType.NEW,
        "Classes": _DocType.CLASS,
        "Conditions": _DocType.CONDITION,
        "Effects": _DocType.EFFECT,
        "Events": _DocType.EVENT,
        "Expressions": _DocType.EXPRESSION,
        "Functions": _DocType.FUNCTION,
        "Sections": _DocType.SECTION,
        "Structures": _DocType.STRUCTURE
    }

    export interface Filter {
        type: string;
        version: string;
    }

    let filter: Filter = {type: "All", version: "All"}

    function handleClick(button: HTMLButtonElement) {
        const isType = button.getAttribute("data-type") === "type";
        if (isType) {
            filter.type = button.textContent!!.trim();
        } else {
            filter.version = button.textContent!!.trim();
        }

        // update rest of buttons
        const buttons = document.querySelectorAll("#filters button");
        buttons.forEach(button => {
            let match = false;
            if (button.getAttribute("data-type") === "type") {
                match = filter.type == button.textContent!!.trim();
            } else {
                match = filter.version == button.textContent!!.trim();
            }

            if (match) {
                button.classList.add("bg-skript", "text-white", "font-bold");
                button.classList.remove("bg-l-bg-secondary", "dark:bg-d-bg-secondary");
            } else {
                button.classList.add("bg-l-bg-secondary", "dark:bg-d-bg-secondary");
                button.classList.remove("bg-skript", "text-white", "font-bold");
            }
        });

        [...document.getElementById("docs")!!.children].forEach(element => {
            if (isType) {
                if (filter.type == "All") {
                    element.classList.remove("hidden-by-type");
                } else if (filter.type == "New") {
                    element.classList.toggle("hidden-by-type", element.getAttribute("data-new") !== "true");
                } else {      
                    element.classList.toggle("hidden-by-type", element.getAttribute("data-type") !== types[filter.type].toString());
                }
            } else {
                if (filter.version == "All") {
                    element.classList.remove("hidden-by-version");
                } else {
                    element.classList.toggle("hidden-by-version", !element.getAttribute("data-since")?.includes(filter.version));
                }
            }
        });
    }

    function resetButtons() {
        const buttons = document.querySelectorAll("#filters .filter-button");
        (buttons[0] as HTMLButtonElement).click();
        (buttons[[...buttons].filter(b => b.getAttribute("data-type") === "type").length] as HTMLButtonElement).click();
    }

    document.addEventListener("DOMContentLoaded", () => {
        const buttons = document.querySelectorAll("#filters .filter-button");
        buttons.forEach(button => {
            button.addEventListener("click", () => handleClick(button as HTMLButtonElement));
        });
        resetButtons();
    });

    document.getElementById("filter-clear")!!.addEventListener("click", resetButtons);

    const expand = document.getElementById("filter-expand")!! as HTMLButtonElement;
    expand.addEventListener("click", () => {
        const filters = document.getElementById("filter-expand-area")!!;
        filters.classList.toggle("hidden");
        filters.classList.toggle("flex");
        expand.querySelector("svg")!!.classList.toggle("rotate-90");
    });

    if (screen.width > 768) {
        expand.click();
    }

    // Update position of filters to be below the nav bar,
    // since filters is sticky this cant be done directly
    const filters = document.getElementById("filters")!!;
    filters.style.top = `${document.getElementById("nav")!!.offsetHeight}px`;
    
    window.addEventListener("DOMContentLoaded", () => {
        filters.classList.remove("!fixed");
    });
</script>

<div id="filters" class="sticky !fixed right-0 top-30
    w-full md:w-64 h-fit md:h-[100vh] flex flex-col p-4 gap-2 
    border-b-2 md:border-b-0 md:border-l-2 border-l-border dark:border-d-border
    md:bg-l-bg dark:bg-d-bg
    overflow-y-hidden">
    <div class="flex flex-row gap-2">
        <h2>Filter by</h2>
        <div class="flex-auto"></div>
        <button id="filter-clear" class="px-2 w-fit rounded-sm 
            hover:cursor-pointer hover:opacity-80 transition">
            Clear
        </button>
        <button id="filter-expand" class="block md:hidden px-2 w-fit rounded-sm 
            hover:cursor-pointer hover:opacity-80 transition">
            <svg class="transition rotate-90" width="18" height="18" viewBox="0 0 18 18" xmlns="http://www.w3.org/2000/svg">
                <path d="M8.60627 10.8563L5.88752 8.1375C5.85002 8.1 5.82202 8.0595 5.80352 8.016C5.78502 7.9725 5.77552 7.9255 5.77502 7.875C5.77502 7.775 5.80952 7.6875 5.87852 7.6125C5.94752 7.5375 6.03802 7.5 6.15002 7.5H11.85C11.9625 7.5 12.0533 7.5375 12.1223 7.6125C12.1913 7.6875 12.2255 7.775 12.225 7.875C12.225 7.9 12.1875 7.9875 12.1125 8.1375L9.39377 10.8563C9.33127 10.9188 9.26877 10.9625 9.20627 10.9875C9.14377 11.0125 9.07502 11.025 9.00002 11.025C8.92502 11.025 8.85627 11.0125 8.79377 10.9875C8.73127 10.9625 8.66877 10.9188 8.60627 10.8563Z"/>
                </svg>
        </button>
    </div>
    <div id="filter-expand-area" class="hidden flex-col gap-2 transition">
        <h3>Type</h3>
        
        <div class="w-fit flex flex-row flex-wrap gap-2">
            {rtTypes.map(x => 
                <button data-type="type" class="filter-button p-2 rounded-md 
                    bg-l-bg-secondary dark:bg-d-bg-secondary 
                    hover:cursor-pointer hover:opacity-80 transition">
                    {x}
                </button>
            )}
        </div>

        <h3>Version</h3>
        <div class="flex flex-wrap gap-2">
            {versions.map(x => 
                <button data-type="version" class="filter-button p-2 rounded-md text-center 
                    bg-l-bg-secondary dark:bg-d-bg-secondary 
                    hover:cursor-pointer hover:opacity-80 transition">
                    {x}
                </button>
            )}
        </div>
    </div>
</div>