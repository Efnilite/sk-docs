---
import Doc, { type DocType } from './Doc.astro';
import DocsFilters from './DocsFilters.astro';
import DocsSyntax from './DocsSyntax.astro';
import docs from '../../assets/docs/docs.json';

const latest = docs.skriptVersion;
const all = [...docs.classes, ...docs.conditions, ...docs.effects, 
            ...docs.events, ...docs.expressions, ...docs.functions,
            ...docs.sections, ...docs.structures].toSorted((x, y) => x.name.localeCompare(y.name));

const names = all.map(x => x.name);

const docTypes: DocType[] = all.map(doc => ({
    name: doc.name,
    new: doc.since?.includes(latest) || false,
    type: type(doc),
    since: (doc.since as string),
    description: doc.description,
    examples: doc.examples!!,
    patterns: doc.patterns!!,
    requirements: null,
    eventValues: null,
    returnType: null,
    events: null
}));

function type(doc: any): string {
    return docs.classes.includes(doc) ? "Class" :
    docs.conditions.includes(doc) ? "Condition" :
    docs.effects.includes(doc) ? "Effect" :
    docs.events.includes(doc) ? "Event" :
    docs.expressions.includes(doc) ? "Expression" :
    docs.functions.includes(doc) ? "Function" :
    docs.sections.includes(doc) ? "Section" :
    docs.structures.includes(doc) ? "Structure" : "Unknown";
}
---

<script>
    window.addEventListener("updatefilters", e => {
        console.log((e as CustomEvent).detail);
    });

    function update() {
        let diff = 0;
        if (screen.width > 768) {
            diff = 2 * 256;
        }
        document.getElementById("docs")!!.style.width = `${document.getElementById("nav")!!.clientWidth - diff}px`
    }

    window.addEventListener("resize", update);
    window.addEventListener("DOMContentLoaded", update);
</script>

<div class="flex flex-col-reverse md:flex-row">
    <DocsSyntax syntax={names}/>

    <div id="docs" class="p-6 flex-auto h-fit flex flex-col gap-2">
        {docTypes.map(x => <Doc docType={x}/>)}
    </div>

    <DocsFilters/>
</div>