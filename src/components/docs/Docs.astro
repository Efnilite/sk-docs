---
import Doc, { type Documentation } from './Doc.astro';
import DocsFilters from './DocsFilters.astro';
import DocsSyntaxes from './DocsSyntaxes.astro';
import docs from '../../assets/docs/docs.json';

const latest = docs.skriptVersion;
const all = [...docs.classes, ...docs.conditions, ...docs.effects, 
            ...docs.events, ...docs.expressions, ...docs.functions,
            ...docs.sections, ...docs.structures].toSorted((x, y) => x.name.localeCompare(y.name));

const docTypes: Documentation[] = all.map(doc => ({
    id: doc.id,
    name: doc.name,
    new: doc.since?.includes(latest.split(".").slice(0, 2).join(".")) || false,
    type: type(doc),
    since: (doc.since as string),
    description: doc.description,
    examples: doc.examples || null,
    patterns: (doc.patterns?.length === 1 && doc.patterns?.[0] === "") ? null : (doc.patterns || null),
    requirements: null,
    eventValues: null,
    returnType: null,
    events: null
}));

export enum DocType {
    UNKNOWN = "All",
    NEW = "New",
    CLASS = "Class",
    CONDITION = "Condition",
    EFFECT = "Effect",
    EVENT = "Event",
    EXPRESSION = "Expression",
    FUNCTION = "Function",
    SECTION = "Section",
    STRUCTURE = "Structure"
}

function type(doc: any): DocType {
    return DocType.CLASS;
}
---

<script>
    function update() {
        let diff = 0;
        if (screen.width > 768) {
            diff = 2 * 256;
        }
        document.getElementById("docs")!!.style.width = `${document.getElementById("nav")!!.clientWidth - diff}px`
    }

    window.addEventListener("resize", update);
    window.addEventListener("DOMContentLoaded", update);

    document.querySelectorAll(".examples").forEach((button) => {
        button.addEventListener("click", () => {
            const example = button.parentElement!!.querySelector(`.example`)!!;
            button.getElementsByTagName("svg")[0].classList.toggle("-rotate-90");
            example.classList.toggle("hidden");
        });
    });

    document.querySelectorAll(".share").forEach((button) => {
        button.addEventListener("click", () => {
            const id = button.parentElement!!.querySelector(`.id`)!!.id;
            const url = `${window.location.origin}${window.location.pathname}#${id}`;
            navigator.clipboard.writeText(url);

            const p = button.getElementsByTagName("p")[0];
            p.classList.remove("hidden");
            setTimeout(() => p.classList.add("hidden"), 2000);
        });
    });
</script>

<div class="flex flex-col-reverse md:flex-row">
    <DocsSyntaxes syntaxes={docTypes.map(syntax => {
        return {
            id: syntax.id,
            isNew: syntax.new,
            type: syntax.type,
            since: syntax.since!!,
            name: syntax.name
        }
    })}/>

    <div id="docs" class="p-2 md:p-6 flex-auto h-fit flex flex-col gap-2 md:gap-4">
        {docTypes.map(x => <Doc docType={x}/>)}
    </div>

    <DocsFilters/>
</div>